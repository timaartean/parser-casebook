import re
import os
import sys
import time
import random
import json
import logging
import pandas as pd
from dotenv import load_dotenv

# –®–∏–º –¥–ª—è Python 3.12: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º distutils –∏–∑ setuptools, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
try:
    import distutils  # noqa: F401
except Exception:
    try:
        import setuptools._distutils as _distutils  # type: ignore
        sys.modules['distutils'] = _distutils
        sys.modules['distutils.version'] = _distutils.version
    except Exception:
        pass

import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bitrix_upload.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('BitrixUpload')


def log_step(step_description):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —à–∞–≥–∞"""

    def decorator(func):
        def wrapper(*args, **kwargs):
            logger.info(f"üü¢ –ù–∞—á–∞–ª–æ: {step_description}")
            try:
                result = func(*args, **kwargs)
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {step_description}")
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ '{step_description}': {str(e)}")
                raise

        return wrapper

    return decorator


class BitrixUploader:
    def __init__(self):
        self.abs_path = os.getcwd()
        self.driver = None
        self.wait = None
        self.status = "–£–º–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω"
        self.summary_stats = {
            'status': self.status,
            'import_page_text': '',
            'created_leads': None,
            'updated_leads': None
        }

    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–π"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            try:
                self.driver = uc.Chrome(headless=True)
            except Exception as start_err:
                msg = str(start_err)
                m = re.search(r"Current browser version is (\d+)", msg)
                if m:
                    major = int(m.group(1))
                    self.driver = uc.Chrome(headless=True, version_main=major)
                else:
                    raise
            self.driver.set_page_load_timeout(120)
            self.wait = WebDriverWait(self.driver, 30)
            time.sleep(2)
        except Exception as e:
            if hasattr(self, 'driver') and self.driver:
                self.driver.quit()
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            raise

    @log_step("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Bitrix24")
    def login(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.driver.get(os.getenv('BITRIX_LOGIN_URL'))

        # –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
        self.wait.until(EC.presence_of_element_located((By.XPATH, "//input[@id='login']")))
        login_field = self.driver.find_element(By.XPATH, "//input[@id='login']")
        login_field.send_keys(os.getenv('BITRIX_LOGIN'))
        self.driver.find_element(
            By.XPATH,
            "//button[contains(@class, 'b24net-login-enter-form__continue-btn')]"
        ).click()

        # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
        self.wait.until(EC.presence_of_element_located((By.XPATH, "//input[@type='password']")))
        password_field = self.driver.find_element(By.XPATH, "//input[@type='password']")
        password_field.send_keys(os.getenv('BITRIX_PASSWORD'))
        self.driver.find_element(
            By.XPATH,
            "//button[contains(@class, 'b24net-password-enter-form__continue-btn')]"
        ).click()
        time.sleep(random.uniform(2, 4))

    @log_step("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–Ω–±–∞–Ω–∞")
    def go_to_kanban(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–Ω–±–∞–Ω–∞"""
        self.driver.get(os.getenv('BITRIX_KANBAN_PAGE'))
        time.sleep(2)

    @log_step("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞")
    def upload_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
        self.wait.until(EC.presence_of_element_located((By.XPATH, "//input[@type='file']")))
        file_input = self.driver.find_element(By.XPATH, "//input[@type='file']")
        path_to_file = os.path.join(self.abs_path, 'CleanedArbitrage.csv')
        file_input.send_keys(path_to_file)
        time.sleep(2)

    @log_step("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–º–ø–æ—Ä—Ç–∞")
    def configure_import(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–º–ø–æ—Ä—Ç–∞"""
        # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –î–∞–ª–µ–µ
        self.wait.until(EC.presence_of_element_located((By.XPATH, "//input[@id='next']"))).click()

        # –í—ã–±–æ—Ä –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        self.wait.until(EC.presence_of_element_located((By.XPATH, "//div[@id='popup-window-content-popup_window']")))
        cod_xpath = "//div[@id='popup-window-content-popup_window']//tr[.//label[contains(@class,'popup-window-label') and normalize-space(text())='windows-1251']]//button[contains(@class,'popup-window-custom-button')]"
        self.driver.find_element(By.XPATH, cod_xpath).click()
        time.sleep(2)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π
        fields = {
            '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–µ–ª–∞': "//select[@name='IMPORT_FILE_FIELD_1']",
            '–°—Å—ã–ª–∫–∞ –Ω–∞ Casebook': "//select[@name='IMPORT_FILE_FIELD_3']",
            '–ò—Å–∫–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ –¥–µ–ª–µ': "//select[@name='IMPORT_FILE_FIELD_8']"
        }

        for field_name, xpath in fields.items():
            self.wait.until(EC.presence_of_element_located((By.XPATH, xpath)))
            self.driver.find_element(By.XPATH, xpath).send_keys(field_name)
            time.sleep(1)

        # –î–≤–∞–∂–¥—ã –Ω–∞–∂–∏–º–∞–µ–º "–î–∞–ª–µ–µ" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        for _ in range(2):
            self.wait.until(EC.presence_of_element_located((
                By.XPATH, "//input[@title='–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É']"
            ))).click()
            time.sleep(2)

    @log_step("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∞")
    def get_import_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ª–∏–¥–∞–º"""
        try:
            import_leads = self.wait.until(
                EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'crm_import_entity')]"))
            )
            text = import_leads.text.strip()
            self.summary_stats['import_page_text'] = text
            created_match = re.search(r"–°–æ–∑–¥–∞–Ω–æ[^\d]*?(\d+)", text)
            if created_match:
                try:
                    self.summary_stats['created_leads'] = int(created_match.group(1))
                except ValueError:
                    self.summary_stats['created_leads'] = None
            updated_match = re.search(r"–û–±–Ω–æ–≤–ª–µ–Ω–æ[^\d]*?(\d+)", text)
            if updated_match:
                try:
                    self.summary_stats['updated_leads'] = int(updated_match.group(1))
                except ValueError:
                    self.summary_stats['updated_leads'] = None
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞: {text}")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")

    @log_step("–û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–∞")
    def process_csv_file(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –¥–µ–ª"""
        try:
            cleaned_path = os.path.join(self.abs_path, 'CleanedArbitrage.csv')
            df = pd.read_csv(cleaned_path, sep=';', encoding='windows-1251')
            data = df.to_dict(orient='records')

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ª
            registry_path = os.path.join(self.abs_path, 'processed_cases.json')
            processed = []
            if os.path.exists(registry_path):
                try:
                    with open(registry_path, 'r', encoding='utf-8') as rf:
                        arr = json.load(rf)
                        if isinstance(arr, list):
                            processed = [str(x).strip() for x in arr]
                except Exception:
                    processed = []

            processed_set = set(processed)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –¥–µ–ª –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
            for line in data:
                case_num = line['–ù–æ–º–µ—Ä –¥–µ–ª–∞']
                case_for_file = re.sub(r'[^\d]', '', case_num)
                processed_set.add(case_for_file)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–µ—Å—Ç—Ä –≤ JSON –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ —Å—Ç—Ä–æ–∫
            new_list = sorted(processed_set)
            with open(registry_path, 'w', encoding='utf-8') as wf:
                json.dump(new_list, wf, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

    @log_step("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ª–∏–¥–æ–≤")
    def setup_filters(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–±–æ—Ä–∞ –ª–∏–¥–æ–≤"""
        try:
            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
            self.wait.until(EC.presence_of_element_located((
                By.XPATH, "//input[@class='main-ui-filter-search-filter' and contains(@id, 'CRM_LEAD_LIST_')]"
            ))).click()
            time.sleep(1)

            # –í—ã–±–æ—Ä —Å—Ç–∞–¥–∏–∏
            self.wait.until(EC.presence_of_element_located((
                By.XPATH, "(//div[@data-name='STATUS_ID'])[2]"
            ))).click()
            time.sleep(1)

            # –í—ã–±–æ—Ä "–ó–∞—è–≤–∫–∏, –≤—Ö. –∑–≤–æ–Ω–∫–∏"
            self.wait.until(EC.presence_of_element_located((
                By.XPATH, "//div[contains(@data-item, '–ó–ê–Ø–í–ö–ò, –í–•. –ó–í–û–ù–ö–ò')]"
            ))).click()
            time.sleep(1)

            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞
            self.wait.until(EC.presence_of_element_located((
                By.XPATH, "(//div[@data-name='STATUS_ID'])[2]"
            ))).click()
            time.sleep(1)

            # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏"
            self.wait.until(EC.presence_of_element_located((
                By.XPATH, "//div[@class='main-ui-filter-field-preset-button-container']/div/button[1]"
            ))).click()
            time.sleep(1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {str(e)}")
            raise

    @log_step("–í—ã–±–æ—Ä –≤—Å–µ—Ö –ª–∏–¥–æ–≤")
    def select_all_leads(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –ª–∏–¥—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
        selectors = [
            ("ID CRM_LEAD_LIST_check_all", "//input[contains(@id, 'CRM_LEAD_LIST') and contains(@id, '_check_all')]"),
            ("–ö–ª–∞—Å—Å main-grid-check-all", "//input[contains(@class, 'main-grid-check-all')]"),
            ("–ó–∞–≥–æ–ª–æ–≤–æ–∫ '–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ'", "//input[@type='checkbox' and contains(@title, '–û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ')]"),
            ("–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫–±–æ–∫—Å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ", "//thead//input[@type='checkbox']")
        ]

        for name, xpath in selectors:
            try:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–µ—Ä–µ–∑ {name}")
                elements = self.driver.find_elements(By.XPATH, xpath)
                if elements:
                    elements[0].click()
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–æ —á–µ—Ä–µ–∑ {name}")
                    return True
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —á–µ—Ä–µ–∑ {name}: {str(e)}")

        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –ª–∏–¥—ã –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤")
        return False

    @log_step("–ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è")
    def run_enrichment_scenario(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            self.driver.execute_script("window.scrollTo(0, document.body.scrollTop);")
            self.driver.find_element(
                By.XPATH, "//button[@id='intranet_binding_menu_crm_switcher']"
            ).click()
            time.sleep(1)

            # –í—ã–±–æ—Ä —É–º–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            self.driver.find_element(
                By.XPATH, "//span[text()='–£–º–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏']"
            ).click()
            time.sleep(1)

            # –í—ã–±–æ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
            self.driver.find_element(
                By.XPATH, "//span[text()='–û–±–æ–≥–∞—â–µ–Ω–∏–µ –õ–∏–¥–∞ —á–µ—Ä–µ–∑ Checko –ò exportBase']"
            ).click()
            time.sleep(2)

            # –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è
            run_btn = self.driver.find_element(
                By.XPATH, "//span[@class='ui-btn-text-inner' and text()='–ó–∞–ø—É—Å—Ç–∏—Ç—å']/parent::span/parent::button"
            )
            self.driver.execute_script("arguments[0].click();", run_btn)
            time.sleep(2)
            self.status = '–°—Ü–µ–Ω–∞—Ä–∏–π –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω'
            logger.info("–£–º–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {str(e)}")
            self.status = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è'
            raise

    def execute(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            self.initialize()
            self.login()
            self.go_to_kanban()
            self.upload_file()
            self.configure_import()
            self.get_import_stats()

            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–∏–¥–æ–≤ –∏ –∑–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            self.driver.get(os.getenv('BITRIX_LEADS_PAGE'))
            time.sleep(3)

            self.process_csv_file()
            self.setup_filters()

            if self.select_all_leads():
                self.run_enrichment_scenario()
            else:
                self.status = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ª–∏–¥—ã, –Ω–æ –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                self.run_enrichment_scenario()

            self.summary_stats['status'] = self.status
            return self.status
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            self.status = f"–û—à–∏–±–∫–∞: {str(e)}"
            self.summary_stats['status'] = self.status
            return self.status
        finally:
            if hasattr(self, 'driver') and self.driver:
                try:
                    self.driver.quit()
                    logger.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except Exception as quit_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(quit_error)}")


def bitrix_upload_file():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑–≤–Ω–µ"""
    uploader = BitrixUploader()
    result = uploader.execute()
    bitrix_upload_file.last_stats = uploader.summary_stats
    return result


if __name__ == "__main__":
    result = bitrix_upload_file()
    logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {result}")


bitrix_upload_file.last_stats = {}
