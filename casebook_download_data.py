import os
import re
import sys
import time
import random
import logging
import glob
from datetime import datetime, timedelta
from typing import Literal
from dotenv import load_dotenv
from urllib.parse import urlparse
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('casebook_download.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('CasebookDownload')


def log_step(step_description):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —à–∞–≥–∞"""

    def decorator(func):
        def wrapper(*args, **kwargs):
            logger.info(f"üü¢ –ù–∞—á–∞–ª–æ: {step_description}")
            try:
                result = func(*args, **kwargs)
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {step_description}")
                return result
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ '{step_description}': {str(e)}")
                raise

        return wrapper

    return decorator


class CasebookDownloader:
    def __init__(self, court_type=None, category_code=None, min_summ=None):
        # –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ DOWNLOAD_DIR
        env_download_dir = (os.getenv('DOWNLOAD_DIR') or '').strip()
        self.abs_path = os.path.abspath(env_download_dir) if env_download_dir else os.getcwd()
        try:
            os.makedirs(self.abs_path, exist_ok=True)
        except Exception:
            pass
        self.court_type = court_type
        self.category_code = category_code
        self.min_summ = min_summ
        self.today = datetime.now().strftime('%d.%m.%Y')
        self.yesterday = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
        self.driver = None
        self.wait = None
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –∏–∑ ENV —Å –¥–µ—Ñ–æ–ª—Ç–æ–º –Ω–∞ ¬´—Å–µ–≥–æ–¥–Ω—è¬ª
        env_date = os.getenv('CASEBOOK_DATE')
        env_date_from = os.getenv('CASEBOOK_DATE_FROM')
        env_date_to = os.getenv('CASEBOOK_DATE_TO')

        if env_date and env_date.strip():
            self.date_from_str = env_date.strip()
            self.date_to_str = env_date.strip()
        else:
            from_val = env_date_from.strip() if env_date_from and env_date_from.strip() else None
            to_val = env_date_to.strip() if env_date_to and env_date_to.strip() else None
            if from_val or to_val:
                self.date_from_str = from_val or to_val
                self.date_to_str = to_val or from_val
            else:
                self.date_from_str = self.today
                self.date_to_str = self.today

    def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(os.path.join(self.abs_path, 'ArbitrageSearchExport.csv')):
                os.remove(os.path.join(self.abs_path, 'ArbitrageSearchExport.csv'))

            options = Options()
            options.page_load_strategy = 'eager'
            prefs = {
                "download.default_directory": self.abs_path,
                "download.prompt_for_download": False,
                "safebrowsing.enabled": True
            }
            options.add_experimental_option("prefs", prefs)
            options.add_argument("--disable-dev-shm-usage")
            options.add_argument("--no-sandbox")
            options.add_argument("--disable-gpu")

            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º headless —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è HEADLESS (true/false)
            headless_env = (os.getenv('HEADLESS') or 'true').strip().lower()
            run_headless = headless_env in ('1', 'true', 'yes', 'y')
            try:
                self.driver = uc.Chrome(headless=run_headless, options=options)
            except Exception as start_err:
                # –ê–≤—Ç–æ-–ø–æ–¥–±–æ—Ä major-–≤–µ—Ä—Å–∏–∏ Chrome –ø—Ä–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞
                msg = str(start_err)
                m = re.search(r"Current browser version is (\d+)", msg)
                if m:
                    major = int(m.group(1))
                    self.driver = uc.Chrome(headless=run_headless, options=options, version_main=major)
                else:
                    raise

            self.driver.set_page_load_timeout(120)
            time.sleep(1)
            try:
                self.driver.set_window_size(1400, 1000)
            except Exception:
                pass
            self.driver.delete_all_cookies()
            self.wait = WebDriverWait(self.driver, 60)
            # –Ø–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –∑–∞–¥–∞—ë–º –∫–∞—Ç–∞–ª–æ–≥ —á–µ—Ä–µ–∑ CDP (–Ω–∞–¥—ë–∂–Ω–æ –¥–ª—è headless/macOS)
            try:
                self.driver.execute_cdp_cmd('Page.setDownloadBehavior', {
                    'behavior': 'allow',
                    'downloadPath': self.abs_path
                })
                logger.info(f"–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏: {self.abs_path}")
            except Exception as cdp_err:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å Page.setDownloadBehavior: {cdp_err}")

        except Exception as e:
            if hasattr(self, 'driver') and self.driver:
                self.driver.quit()
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {str(e)}")
            raise

    @log_step("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Casebook")
    def login(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        self.driver.get(os.getenv('CASEBOOK_LOGIN_URL'))

        # –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞
        self.wait.until(EC.presence_of_element_located((By.XPATH, "//input[@name='UserName']")))
        login_field = self.driver.find_element(By.XPATH, "//input[@name='UserName']")
        login_field.send_keys(os.getenv('CASEBOOK_LOGIN'))

        # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
        self.wait.until(EC.presence_of_element_located((By.XPATH, "//input[@name='Password']")))
        password_field = self.driver.find_element(By.XPATH, "//input[@name='Password']")
        password_field.send_keys(os.getenv('CASEBOOK_PASSWORD'))

        old_url = self.driver.current_url

        # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
        self.driver.find_element(
            By.XPATH,
            "//div[@class='b-form-control']/div[contains(@class, 'ui-button')]"
        ).click()
        # –ñ–¥—ë–º, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (—Å–º–µ–Ω–∞ URL)
        self.wait.until(EC.url_changes(old_url))

    @log_step("–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞")
    def go_to_search_page(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ –¥–µ–ª"""
        old_url = self.driver.current_url

        self.wait.until(EC.presence_of_element_located((
            By.XPATH, "//a[@href='/app/request']"
        ))).click()
        # –ñ–¥—ë–º, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (—Å–º–µ–Ω–∞ URL)
        self.wait.until(EC.url_changes(old_url))

    def go_to_search_page_via_url(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–ø—Ä—è–º—É—é –ø–æ —Å—Å—ã–ª–∫–µ"""
        current = self.driver.current_url
        parsed = urlparse(current)
        origin = f"{parsed.scheme}://{parsed.netloc}"
        target = origin + "/app/request/new/cases"
        self.driver.get(target)
        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ "–£–∫–∞–∂–∏—Ç–µ —Å—É–¥"
        self.wait.until(EC.presence_of_element_located((
            By.XPATH, "//div[@data-title='–£–∫–∞–∂–∏—Ç–µ —Å—É–¥']"
        )))

    @log_step("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞")
    def setup_search_parameters(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ –¥–µ–ª"""
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å—É–¥–∞
        court_filter = self.wait.until(EC.element_to_be_clickable((
            By.XPATH, "//div[@data-title='–£–∫–∞–∂–∏—Ç–µ —Å—É–¥']"
        )))
        self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", court_filter)
        self.driver.execute_script("arguments[0].click();", court_filter)
        court_option = self.wait.until(EC.element_to_be_clickable((
            By.XPATH, f"//label[contains(text(), '{self.court_type}')]"
        )))
        self.driver.execute_script("arguments[0].click();", court_option)
        # –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–æ—Ä–∞ –ø–æ –∫–æ–¥—É
        category_container = self.wait.until(EC.element_to_be_clickable((
            By.XPATH, "//div[contains(@class,'b-filter-container') and contains(@class,'js-filter-container') and @data-title='–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–æ—Ä–∞']"
        )))
        self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", category_container)
        self.driver.execute_script("arguments[0].click();", category_container)

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            input_inside = self.wait.until(EC.presence_of_element_located((
                By.XPATH, "//div[contains(@class,'b-filter--case_categories')]//input"
            )))
            input_inside.clear()
            input_inside.send_keys(str(self.category_code))
            time.sleep(0.5)
        except Exception:
            try:
                actions = ActionChains(self.driver)
                for ch in str(self.category_code):
                    actions.send_keys(ch)
                actions.perform()
                time.sleep(0.5)
            except Exception:
                pass

        # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        label_elem = None
        try:
            label_elem = self.wait.until(EC.presence_of_element_located((
                By.XPATH, f"//div[contains(@class,'b-filter--case_categories')]//li[contains(@class,'b-filter-option')]//label[contains(., '{str(self.category_code)}')]"
            )))
        except Exception:
            pass

        if not label_elem:
            # –§–æ–ª–±—ç–∫: –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
            lis = self.wait.until(EC.presence_of_all_elements_located((
                By.CSS_SELECTOR, "div.b-filter--case_categories ul.b-filter-dropdown-list li.b-filter-option"
            )))
            if lis:
                label_elem = lis[0].find_element(By.TAG_NAME, "label")

        if label_elem:
            self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", label_elem)
            self.driver.execute_script("arguments[0].click();", label_elem)
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã "—Å"
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥—Ä–æ–ø–¥–∞—É–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∫–ª–∏–∫–æ–º –≤–Ω–µ (–ø–æ —Ç–µ–ª—É) –∏ ESC, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª –ø–æ–ª—è
        # self.driver.execute_script("document.body.click();")
        # ActionChains(self.driver).send_keys(Keys.ESCAPE).perform()
        time.sleep(0.5)
        # –ù–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –¥—Ä–æ–ø–¥–∞—É–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª—è –¥–∞—Ç ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º ESC
        try:
            ActionChains(self.driver).send_keys(Keys.ESCAPE).perform()
            time.sleep(0.2)
        except Exception:
            pass

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∑–Ω–∞—á–µ–Ω–∏—è
        self._set_date_field_with_retry("//input[@data-name='from']", self.date_from_str)
        self._set_date_field_with_retry("//input[@data-name='to']", self.date_to_str)

        sum_param = self.driver.find_elements(By.XPATH, "//div[@data-id='param-sum']")
        if not sum_param:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –¥–ª—è —Å—É–º–º—ã 
            self.driver.find_element(
                By.XPATH, "//div[contains(@class, 'b-operator-button')]"
            ).click()
            self.wait.until(EC.presence_of_element_located((
                By.XPATH, "//div[@data-id='param-sum']"
            ))).click()
            time.sleep(0.2)
        # –£–∫–∞–∑–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
        min_summ_field = self.wait.until(EC.presence_of_element_located((
            By.XPATH, "//input[@name='minSum']"
        )))
        min_summ_field.send_keys(self.min_summ)
        time.sleep(0.2)

    @log_step("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–µ–ª")
    def perform_search(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –¥–µ–ª"""
        self.driver.find_element(
            By.XPATH, "//div[contains(@class, 'b-quick_menu-button--search')]"
        ).click()
        # –û–∂–∏–¥–∞–µ–º, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –±–ª–æ–∫ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.wait.until(EC.presence_of_element_located((By.ID, "search_results_total")))

    def _set_date_field_with_retry(self, xpath: str, value: str):
        """–ù–∞–¥—ë–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –≤ –ø–æ–ª–µ: –∫–ª–∏–∫, –æ—á–∏—Å—Ç–∫–∞, –≤–≤–æ–¥, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ JS-—Ñ–æ–ª–±—ç–∫."""
        elem = self.wait.until(EC.presence_of_element_located((By.XPATH, xpath)))
        try:
            self.driver.execute_script("arguments[0].scrollIntoView({block:'center'});", elem)
        except Exception:
            pass
        try:
            self.driver.execute_script("arguments[0].click();", elem)
        except Exception:
            try:
                elem.click()
            except Exception:
                pass
        # –û—á–∏—Å—Ç–∫–∞: clear + Cmd/Ctrl+A + Delete
        try:
            elem.clear()
        except Exception:
            pass
        try:
            modifier = Keys.COMMAND if sys.platform == 'darwin' else Keys.CONTROL
            elem.send_keys(modifier, 'a')
            elem.send_keys(Keys.DELETE)
        except Exception:
            pass
        time.sleep(0.1)
        try:
            elem.send_keys(value)
        except Exception:
            pass
        time.sleep(0.2)
        actual = (elem.get_attribute('value') or '').strip()
        if actual != value:
            try:
                self.driver.execute_script(
                    "arguments[0].value = arguments[1]; arguments[0].dispatchEvent(new Event('input', {bubbles:true})); arguments[0].dispatchEvent(new Event('change', {bubbles:true}));",
                    elem, value
                )
                time.sleep(0.1)
            except Exception:
                pass
            actual = (elem.get_attribute('value') or '').strip()

    @log_step("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    def get_results_count(self):
        """–°—á–∏—Ç–∞—Ç—å —á–∏—Å–ª–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–µ–ª –∏–∑ –±–ª–æ–∫–∞ —Å id=search_results_total"""
        try:
            elem = self.wait.until(EC.presence_of_element_located((By.ID, "search_results_total")))
            text = (elem.text or "").replace('\xa0', ' ').strip()

            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: –±–µ—Ä—ë–º —á–∏—Å–ª–æ –ø–æ—Å–ª–µ "–ù–∞–π–¥–µ–Ω–æ", —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ; –∑–∞–ø–∞—Å–Ω–æ–π –ø–∞—Ä—Å–µ—Ä ‚Äî –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ
            match = re.search(r"–Ω–∞–π–¥–µ–Ω–æ\s+([\d\s]+)", text, re.IGNORECASE)
            if not match:
                match = re.search(r"([\d\s]+)", text)
            if match:
                return int(re.sub(r"\s+", "", match.group(1)))
            return 0
        except Exception:
            return 0

    @log_step("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    def download_results(self):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ"""
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é
        self.driver.find_element(
            By.XPATH, "(//div[contains(@class, 'js-extra_menu')])[1]"
        ).click()

        # –í—ã–±–æ—Ä –æ–ø—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        start_ts = time.time()
        self.wait.until(EC.presence_of_element_located((
            By.XPATH, "//div[@id='extra_menu_subpartition']/li[2]"
        ))).click()

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: —É—á–∏—Ç—ã–≤–∞–µ–º .crdownload –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º—ë–Ω
        target_name = os.path.join(self.abs_path, 'ArbitrageSearchExport.csv')
        spent_time = 0
        downloaded_path: str | None = None
        while True:
            if spent_time >= 300:  # 5 –º–∏–Ω—É—Ç timeout
                raise TimeoutError("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")

            if os.path.exists(target_name):
                downloaded_path = target_name
                break

            candidates = [
                p for p in glob.glob(os.path.join(self.abs_path, 'ArbitrageSearchExport*.csv'))
                if not p.endswith('.crdownload') and os.path.getmtime(p) >= start_ts - 2
            ]
            cr_in_progress = any(
                os.path.getmtime(p) >= start_ts - 2
                for p in glob.glob(os.path.join(self.abs_path, '*.crdownload'))
            )
            if candidates and not cr_in_progress:
                downloaded_path = max(candidates, key=os.path.getmtime)
                break

            time.sleep(1)
            spent_time += 1
            if spent_time % 10 == 0:
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞... {spent_time} —Å–µ–∫.")

        if downloaded_path and os.path.abspath(downloaded_path) != os.path.abspath(target_name):
            try:
                if os.path.exists(target_name):
                    os.remove(target_name)
                os.replace(downloaded_path, target_name)
            except Exception as rn_err:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å {downloaded_path} ‚Üí ArbitrageSearchExport.csv: {rn_err}")

    def execute(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        try:
            self.initialize()
            self.login()
            self.go_to_search_page()
            self.setup_search_parameters()
            self.perform_search()
            results_count = self.get_results_count()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º results_count –≤ —Å—Ç—Ä–æ–∫—É —Å —ç–º–æ–¥–∑–∏-—Ü–∏—Ñ—Ä–∞–º–∏ –¥–ª—è –ª–æ–≥–æ–≤

            emoji_results_count = num_to_emoji(results_count)
            cases_word = pluralize_cases(results_count)

            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {emoji_results_count} {cases_word}")

            if results_count > 0:
                self.download_results()
                return True, f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞–π–¥–µ–Ω–æ: {emoji_results_count} {cases_word}"
            else:
                return False, "–ù–∞–π–¥–µ–Ω–æ 0Ô∏è‚É£ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –¥–µ–ª"

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return False, f"–û—à–∏–±–∫–∞: {str(e)}"
        finally:
            if hasattr(self, 'driver') and self.driver:
                try:
                    self.driver.quit()
                    logger.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
                except Exception as quit_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(quit_error)}")

    def setup_search_parameters_for(self, court_type, category_code, min_summ):
        """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        self.court_type = court_type
        self.category_code = category_code
        self.min_summ = min_summ
        self.setup_search_parameters()


def run_casebook_driver(court_type, category_code, min_summ):
    """–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫ (—Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é –ø–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É)"""
    downloader = CasebookDownloader(court_type, category_code, min_summ)
    return downloader.execute()


def create_casebook_session() -> CasebookDownloader:
    """–°–æ–∑–¥–∞—Ç—å –∏ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é Casebook –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    downloader = CasebookDownloader()
    downloader.initialize()
    downloader.login()
    return downloader


def process_casebook_request(downloader: CasebookDownloader, court_type: str, category_code: str, min_summ: str, date_from: str | None = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –≤ —Ä–∞–º–∫–∞—Ö –æ—Ç–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (bool, count)."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏, –∑–∞—Ç–µ–º ENV, –∑–∞—Ç–µ–º ¬´—Å–µ–≥–æ–¥–Ω—è¬ª
    if date_from and date_from.strip():
        downloader.date_from_str = date_from.strip()
        downloader.date_to_str = date_from.strip()
    else:
        env_date = os.getenv('CASEBOOK_DATE')
        env_date_from = os.getenv('CASEBOOK_DATE_FROM')
        env_date_to = os.getenv('CASEBOOK_DATE_TO')
        if env_date and env_date.strip():
            downloader.date_from_str = env_date.strip()
            downloader.date_to_str = env_date.strip()
        elif (env_date_from and env_date_from.strip()) or (env_date_to and env_date_to.strip()):
            from_val = env_date_from.strip() if env_date_from and env_date_from.strip() else None
            to_val = env_date_to.strip() if env_date_to and env_date_to.strip() else None
            downloader.date_from_str = from_val or to_val or downloader.today
            downloader.date_to_str = to_val or from_val or downloader.today
        else:
            downloader.date_from_str = downloader.today
            downloader.date_to_str = downloader.today

    downloader.go_to_search_page_via_url()
    downloader.setup_search_parameters_for(court_type, category_code, min_summ)
    downloader.perform_search()
    results_count = downloader.get_results_count()
    try:
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {num_to_emoji(results_count)} {pluralize_cases(results_count)}")
    except Exception:
        pass
    if results_count > 0:
        downloader.download_results()
        return True, results_count
    return False, 0


def close_casebook_session(downloader: CasebookDownloader):
    """–ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é"""
    if hasattr(downloader, 'driver') and downloader.driver:
        try:
            downloader.driver.quit()
            logger.info("–ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as quit_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {str(quit_error)}")

def num_to_emoji(num):
    emoji_digits = {
        '0': '0Ô∏è‚É£',
        '1': '1Ô∏è‚É£',
        '2': '2Ô∏è‚É£',
        '3': '3Ô∏è‚É£',
        '4': '4Ô∏è‚É£',
        '5': '5Ô∏è‚É£',
        '6': '6Ô∏è‚É£',
        '7': '7Ô∏è‚É£',
        '8': '8Ô∏è‚É£',
        '9': '9Ô∏è‚É£'
    }
    return ''.join(emoji_digits.get(d, d) for d in str(num))

def pluralize_cases(n):
    n = abs(int(n))
    if 11 <= (n % 100) <= 14:
        return "–¥–µ–ª"
    last = n % 10
    if last == 1:
        return "–¥–µ–ª–æ"
    elif 2 <= last <= 4:
        return "–¥–µ–ª–∞"
    else:
        return "–¥–µ–ª"


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    result, message = run_casebook_driver(
        court_type="–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π —Å—É–¥ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã",
        category_code="5.1",
        min_summ="1000000"
    )
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result}, –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")